package com.sellaspot;

import java.util.ArrayList;

import android.app.Dialog;
import android.app.ListFragment;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.StrictMode;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.RatingBar;
import android.widget.TextView;
import android.widget.Toast;

import com.sellaspot.datamodel.Item;
import com.sellaspot.datamodel.RESTData;
import com.sellaspot.datamodel.UserRating;
import com.sellaspot.db.DBSession;

public class SpotsFragment extends ListFragment {
 
	private ArrayList<Item> spots = new ArrayList<Item>();;
	private SpotsAdapter itemAdapter;

	private String userId;
	private String sessionId;
	private String itemId;
	
	private static final String TAG = "SellerSpotsActivity";
	private SpotsFragment fragment;
	
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        
    	// Inflate the layout for this fragment
        return inflater.inflate(R.layout.seller_spots_layout, container, false);
    }
    
    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
    
    	super.onActivityCreated(savedInstanceState);
		
    	StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
    	StrictMode.setThreadPolicy(policy);
    	
		fragment = this;
		
		new LoadData().execute();
		
		this.itemAdapter = new SpotsAdapter(this.getActivity().getApplicationContext(), R.layout.list_row, spots);
		setListAdapter(this.itemAdapter);
		
	}

	private class SpotsAdapter extends ArrayAdapter<Item> {

		private ArrayList<Item> items;

		public SpotsAdapter(Context context, int textViewResourceId,
				ArrayList<Item> items) {
			super(context, textViewResourceId, items);
			this.items = items;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			
			View v = convertView;
			
			if (v == null) {
			
				LayoutInflater vi = (LayoutInflater) this.getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
				v = vi.inflate(R.layout.list_row, null);
			}
			
			Item item = items.get(position);
			
			if (item != null) {

				TextView tt = (TextView) v.findViewById(R.id.toptext);
				TextView bt = (TextView) v.findViewById(R.id.bottomtext);
				TextView bidsText = (TextView) v.findViewById(R.id.bidsText);
				ImageView imgView = (ImageView)v.findViewById(R.id.icon);

				//Display icon based on category
				String category = item.getCategory();
				
				if(category.equalsIgnoreCase("concerts")) {
				
					imgView.setBackgroundResource(R.drawable.ic_action_guitar);
				
				} else if(category.equalsIgnoreCase("restaurant")) {
				
					imgView.setBackgroundResource(R.drawable.ic_action_restaurant);
				} else if(category.equalsIgnoreCase("parking")) {
				
					imgView.setBackgroundResource(R.drawable.ic_action_car);
				
				} else if(category.equalsIgnoreCase("sports")) {
				
					imgView.setBackgroundResource(R.drawable.ic_action_ball);
				
				} else if(category.equalsIgnoreCase("movies")) {
				
					imgView.setBackgroundResource(R.drawable.ic_action_movie);
				
				} else if(category.equalsIgnoreCase("theme park")) {
				
					imgView.setBackgroundResource(R.drawable.ic_action_globe);
				
				} else if(category.equalsIgnoreCase("general")) {
				
					imgView.setBackgroundResource(R.drawable.ic_action_location);
				} else {
					imgView.setBackgroundResource(R.drawable.ic_action_location);
				}
				
				if (tt != null) {
					tt.setText(item.getItemdescription());
				}
				if (bt != null) {
					bt.setText(item.getVenuename() + "\n" + item.getCity() + "," + item.getState());
				}

				if (bidsText != null) {
					bidsText.setText(item.getNumofbids() + " bids");
				}
			}
			return v;
		}
	}

	@Override
	public void onListItemClick(ListView lv, View v, int position, long id) {

    	final Dialog dialog = new Dialog(this.getActivity());
		dialog.setContentView(R.layout.spot_detail_dialog);
		
		dialog.setTitle("Bid For Spot!");

		//final TextView txtView = (TextView)dialog.findViewById(R.id.textView1);
		
		String itemId = String.valueOf(spots.get(position).getItemid());
		
		DBSession session = new DBSession(this.getActivity());
		
		this.itemId = itemId;
		this.userId = session.getUserId();
		this.sessionId = session.getSessionId();
		
		final Item item = RESTData.getSpotById(this.itemId, this.userId, this.sessionId);
		UserRating userRating = RESTData.getRating(this.userId, this.sessionId, item.getUserid());
		RatingBar ratingBar = (RatingBar)dialog.findViewById(R.id.userRatingBar);
		ratingBar.setEnabled(false);
		
		TextView getDirectionsTextView = (TextView)dialog.findViewById(R.id.getDirectionsTextView);
		
		getDirectionsTextView.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				
				//TODO: Change hardcoded values
				Intent intent = new Intent(android.content.Intent.ACTION_VIEW, 
				Uri.parse("http://maps.google.com/maps?saddr=" + CurrentLocation.latitude+"," + CurrentLocation.longitude + 
						"&daddr=" + item.getLatitude()+"," + item.getLongitude() + "&f=d"));
				startActivity(intent);
			}
		});
		
		if(userRating != null) {
		
			ratingBar.setRating(userRating.getTotalrating());
		}
		
		//String itemText = item.getItemdescription() + " \nCategory: " + item.getCategory() + "\nLocation: " + item.getCity() + "," + item.getState() + "\nPrice: $" + item.getPrice() + "\nQuantity: " +item.getQuantity(); 
		//txtView.setText(itemText);
		
		Button spotItButton = (Button) dialog.findViewById(R.id.bidButton);
		// if button is clicked, close the custom dialog
		spotItButton.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				
	      		TextView bidPriceTextView = (TextView)dialog.findViewById(R.id.bid_price);
	     		TextView userDescriptionTextView = (TextView)dialog.findViewById(R.id.user_description);

	     		if(RESTData.bidOnSpot(fragment.userId, fragment.sessionId, fragment.itemId, bidPriceTextView.getText().toString(), userDescriptionTextView.getText().toString(), "seller")) {
	         		Toast.makeText(fragment.getActivity(), "Bid for the spot.Seller will be sent notification", Toast.LENGTH_LONG).show();
	     		} else {
	         		Toast.makeText(fragment.getActivity(), "Bid FAILED! Try again later", Toast.LENGTH_LONG).show();
	     		}
				
				dialog.dismiss();
			}
		});

		ImageView categoryImageView = (ImageView)dialog.findViewById(R.id.categoryImageView);
		TextView itemDescriptionTextView = (TextView)dialog.findViewById(R.id.itemDescriptionTextView);
		TextView locationTextView = (TextView)dialog.findViewById(R.id.locationTextView);
		TextView priceTextView = (TextView)dialog.findViewById(R.id.priceTextView);
		
		//Display icon based on category
		String category = item.getCategory();
		
		if(category.equalsIgnoreCase("concerts")) {
		
			categoryImageView.setBackgroundResource(R.drawable.ic_action_guitar);
		
		} else if(category.equalsIgnoreCase("restaurant")) {
		
			categoryImageView.setBackgroundResource(R.drawable.ic_action_restaurant);
		} else if(category.equalsIgnoreCase("parking")) {
		
			categoryImageView.setBackgroundResource(R.drawable.ic_action_car);
		
		} else if(category.equalsIgnoreCase("sports")) {
		
			categoryImageView.setBackgroundResource(R.drawable.ic_action_ball);
		
		} else if(category.equalsIgnoreCase("movies")) {
		
			categoryImageView.setBackgroundResource(R.drawable.ic_action_movie);
		
		} else if(category.equalsIgnoreCase("theme park")) {
		
			categoryImageView.setBackgroundResource(R.drawable.ic_action_globe);
		
		} else if(category.equalsIgnoreCase("general")) {
		
			categoryImageView.setBackgroundResource(R.drawable.ic_action_location);
		} else {
			categoryImageView.setBackgroundResource(R.drawable.ic_action_location);
		}

		
		itemDescriptionTextView.setText(item.getItemdescription());
		locationTextView.setText(item.getAddress() + "\n" + item.getCity() + "," + item.getState());
		priceTextView.setText(item.getQuantity() + " spots available for $" + item.getPrice());
		
		dialog.show();
		
	}

	@Override
	public void onResume() {
		super.onResume();
		updateUI();
	}

	@Override
	public void onPause() {
		super.onPause();
	}
	
	private void updateUI() {
		

	}
	
	public class LoadData extends AsyncTask<Void, Void, Void> {
	    
		ProgressDialog progressDialog;
	    
	    //declare other objects as per your need
	    @Override
	    protected void onPreExecute()
	    {
	        progressDialog = ProgressDialog.show(fragment.getActivity(), "Loading", "Getting spots of your interest", true);

	        //do initialization of required objects objects here                
	    };      
	    @Override
	    protected Void doInBackground(Void... params)
	    {   
			DBSession session = new DBSession(fragment.getActivity().getApplicationContext());

			spots = (ArrayList<Item>) RESTData.getSpots(session.getUserId(), session.getSessionId(), "seller");
			
			Log.d(TAG, spots.toString());

	         //do loading operation here  
	        return null;
	    }       
	    @Override
	    protected void onPostExecute(Void result)
	    {
	        super.onPostExecute(result);
			if (spots != null && spots.size() > 0) {
				
				itemAdapter.clear();
				itemAdapter.notifyDataSetChanged();
				
				for (int i = 0; i < spots.size(); i++)
					itemAdapter.add(spots.get(i));
			}
			// progressDialog.dismiss();
			itemAdapter.notifyDataSetChanged();    
	        progressDialog.dismiss();
	    };
	 }
	
}